// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String           @id @default(cuid())
  name           String?
  email          String?          @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  questionnaires Questionnaires[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Lip {
  id          String        @id @default(cuid())
  name        String?       @db.VarChar(100)
  price       Int?
  color       String?       @db.VarChar(100)
  size        String?       @db.VarChar(100)
  description String?       @db.Text
  image       String?
  lipTypes    Lip2LipType[]

  @@map("lips")
}

model Lip2LipType {
  lip       Lip     @relation(fields: [lipId], references: [id])
  lipId     String  @map("lip_id") @db.VarChar(100)
  lipType   LipType @relation(fields: [lipTypeId], references: [id])
  lipTypeId String  @map("lipType_id") @db.VarChar(100)

  @@id([lipId, lipTypeId])
  @@map("lip_lipType")
}

model LipType {
  id   String        @id @default(cuid())
  name String        @unique @db.VarChar(20)
  lips Lip2LipType[]

  @@map("lipTypes")
}

model Perfume {
  id           String                @id @default(cuid())
  name         String?               @db.VarChar(100)
  price        Int?
  color        String?               @db.VarChar(100)
  size         String?               @db.VarChar(100)
  description  String?               @db.Text
  image        String?
  perfumeTypes Perfume2PerfumeType[]

  @@map("perfumes")
}

model Perfume2PerfumeType {
  perfume       Perfume     @relation(fields: [perfumeId], references: [id])
  perfumeId     String      @map("perfume_id") @db.VarChar(100)
  perfumeType   PerfumeType @relation(fields: [perfumeTypeId], references: [id])
  perfumeTypeId String      @map("perfumeype_id") @db.VarChar(100)

  @@id([perfumeId, perfumeTypeId])
  @@map("perfume_perfumeType")
}

model PerfumeType {
  id       String                @id @default(cuid())
  name     String                @unique @db.VarChar(20)
  perfumes Perfume2PerfumeType[]

  @@map("perfumeTypes")
}

model Skin {
  id          String          @id @default(cuid())
  name        String?         @db.VarChar(100)
  price       Int?
  color       String?         @db.VarChar(100)
  size        String?         @db.VarChar(100)
  description String?         @db.Text
  image       String?
  skinTypes   Skin2SkinType[]

  @@map("skins")
}

model Skin2SkinType {
  skin       Skin     @relation(fields: [skinId], references: [id])
  skinId     String   @map("skin_id") @db.VarChar(100)
  skinType   SkinType @relation(fields: [skinTypeId], references: [id])
  skinTypeId String   @map("skinType_id") @db.VarChar(100)

  @@id([skinId, skinTypeId])
  @@map("skin_skinType")
}

model SkinType {
  id    String          @id @default(cuid())
  name  String          @unique @db.VarChar(20)
  skins Skin2SkinType[]

  @@map("skinTypes")
}

model Hair {
  id          String          @id @default(cuid())
  name        String?         @db.VarChar(100)
  price       Int?
  color       String?         @db.VarChar(100)
  size        String?         @db.VarChar(100)
  description String?         @db.Text
  image       String?
  hairTypes   Hair2HairType[]

  @@map("hairs")
}

model Hair2HairType {
  hair       Hair     @relation(fields: [hairId], references: [id])
  hairId     String   @map("hair_id") @db.VarChar(100)
  hairType   HairType @relation(fields: [hairTypeId], references: [id])
  hairTypeId String   @map("hairType_id") @db.VarChar(100)

  @@id([hairId, hairTypeId])
  @@map("hair_hairType")
}

model HairType {
  id    String          @id @default(cuid())
  name  String          @unique @db.VarChar(20)
  hairs Hair2HairType[]

  @@map("hairTypes")
}

model Questionnaires {
  id        String    @id @default(cuid())
  userId    String
  agreement Int?
  feeling   Int?
  date      String?   @db.VarChar(100)
  lip       Boolean?  @default(false)
  eye       Boolean?  @default(false)
  hair      Boolean?  @default(false)
  perfume   Boolean?  @default(false)
  skin      Boolean?  @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
